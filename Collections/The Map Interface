/* The Map Interface
 The Collections Framework also includes the java.util.Map, which is a collection of
 key/value pairs. Other names for map are “dictionary” or “associative array.” Maps
 store and retrieve elements with key values; they are very useful for things like caches
 or minimalist databases. When you store a value in a map, you associate a key object
 with a value. When you need to look up the value, the map retrieves it using the key.
 With generics, a Map type is parameterized with two types: one for the keys and one
 for the values. The following snippet uses a HashMap, which is an efficient but unor
dered type of map implementation that we’ll discuss later:
 Map<String, Date> dateMap = new HashMap<String, Date>();
 dateMap.put( "today", new Date() );
 Date today = dateMap.get( "today" );
 In legacy code, maps simply map Object types to Object types and require the appro
priate cast to retrieve values.
 The basic operations on Map are straightforward. In the following methods, the type K
 refers to the key parameter type, and the type V refers to the value parameter type*/



 /*public V put( K key , V value )
 Adds the specified key/value pair to the map. If the map already contains a value
 for the specified key, the old value is replaced and returned as the result.


 public V get( K key )
 Retrieves the value corresponding to key from the map.


 public V remove( K key )
 Removes the value corresponding to key from the map. The value removed is
 returned.


 public int size()
 Returns the number of key/value pairs in this map.


 You can retrieve all the keys or values in the map using the following methods:
 
 public Set keySet()
 This method returns a Set that contains all the keys in this map.

 public Collection values()
 Use this method to retrieve all the values in this map. The returned Collection
 can contain duplicate elements.

 public Set entrySet()
 This method returns a Set that contains all the key/value pairs (as Map.Entry
 objects) in this map.

 Map has one child interface, SortedMap. A SortedMap maintains its key/value pairs
 sorted in a particular order according to the key values. It provides the subMap(),
 headMap(), and tailMap() methods for retrieving sorted map subsets. Like Sorted
 Set, it also provides a comparator() method, which returns an object that determines
 how the map keys are sorted. We’ll talk more about that in “A Closer Look: The sort()
 Method” on page 218. Java 7 added a NavigableMap with functionality parallel to that
 of NavigableSet; namely, it adds methods to search the sorted elements for an ele
ment greater or lesser than a target value.

 Finally, we should make it clear that although related, Map is not literally a type of
 Collection (Map does not extend the Collection interface). You might wonder why.
 All of the methods of the Collection interface would appear to make sense for Map,
 except for iterator(). A Map, again, has two sets of objects: keys and values, and sep
arate iterators for each. This is why a Map does not implement a Collection. If you do
 want a Collection-like view of a Map with both keys and values, you can use the
 entrySet() method.
 
 One more note about maps: some map implementations (including Java’s standard
 HashMap) allow null to be used as a key or value, but others may not. */